<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Siran Yao</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Siran Yao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 01 Mar 2020 19:12:42 +0800</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Condition 源码分析</title>
      <link>/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 01 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>Condition可以替代传统的Object中的wait()、notify()和notifyAll()方法来实现线程间的通信，使线程间协作更加安全和高效。</description>
    </item>
    
    <item>
      <title>FutureTask 源码分析</title>
      <link>/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 15 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>FutureTask 是一个可以取消的异步计算任务，实现Future，Runnable。提供超时控制、可以获取线程执行后的返回结果、可以取消。</description>
    </item>
    
    <item>
      <title>Raft 协议</title>
      <link>/blog/raft-%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Thu, 13 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/raft-%E5%8D%8F%E8%AE%AE/</guid>
      <description>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是比 Paxos 更容易理解并且更容易实现。</description>
    </item>
    
    <item>
      <title>PriorityQueue 源码分析</title>
      <link>/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 12 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>PriorityQueue里的每个元素都会进行排序，每次弹出一个元素要么是最大的要么是最小的，取决于排序规则。</description>
    </item>
    
    <item>
      <title>CountDownLatch 源码分析</title>
      <link>/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 05 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</description>
    </item>
    
    <item>
      <title>Raft 思维导图</title>
      <link>/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</guid>
      <description>本人对Raft的实现</description>
    </item>
    
    <item>
      <title>ReentrantReadWriteLock 源码分析</title>
      <link>/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 05 Feb 2020 11:12:42 +0800</pubDate>
      
      <guid>/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ReentrantReadWriteLock 是什么?</description>
    </item>
    
    <item>
      <title>CyclicBarrier 源码分析</title>
      <link>/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 04 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>CyclicBarrier(回声栅栏)根据Javadoc描述，它会阻塞一组线程直到这些线程同时达到某个条件才继续执行。它就像一个栅栏一样，当一组线程都到达了栅栏处才继续往下走。</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor 源码分析</title>
      <link>/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 18 Jan 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ThreadPoolExecutor中常用参数有哪些，作用是什么？任务提交后，ThreadPoolExecutor会按照什么策略去创建线程用于执行提交任务？</description>
    </item>
    
    <item>
      <title>ReentrantLock 源码分析</title>
      <link>/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>通常使用锁就是 synchronized，经过 jdk 的一系列优化引入偏向锁、轻量级锁、重量级锁等概念，性能也是有很大的提高。</description>
    </item>
    
    <item>
      <title>ScheduledThreadPoolExecutor 源码分析</title>
      <link>/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ScheduledThreadPoolExecutor 定义了一个延迟队列 DelayedWorkQueue，这个队列是基于二叉堆来实现的，每次都会把最快要执行的任务放入堆顶(最小堆)。</description>
    </item>
    
    <item>
      <title>Semaphore 源码分析</title>
      <link>/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 05 Jun 2018 19:12:42 +0800</pubDate>
      
      <guid>/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>基于微服务的架构是未来的趋势，但是实现这种架构会面临许多困难。现代应用架构远比过去的架构复杂，因此实现微服务架构将会带来了一系列特殊的挑战，而服务网格可以帮我们解决很多问题。</description>
    </item>
    
  </channel>
</rss>