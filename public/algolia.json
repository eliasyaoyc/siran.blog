[{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcgy1ft5wypaul5j31ji15ob2b.jpg","categories":["并发编程"],"date":"2020-03-20T16:37:42+08:00","fuzzywordcount":7300,"keywords":["Java","基础"],"lang":"zh","lastmod":"2020-03-20T16:37:42+08:00","objectID":"8dbbb7e3c22c60d13754a594df37febc","permalink":"/blog/synchronized-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/","publishdate":"2020-03-20T16:37:42+08:00","readingtime":15,"relpermalink":"/blog/synchronized-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/","summary":"synchronized 关键字是 Java里面用来进行同步的。它编译后，会在同步块的前后分别生成 mointorenter 和 mointerexit 字节码指令，这两个字节码指令都需要一个引用类型的参数来指定要锁定和解锁的对象。","tags":["并发关键字"],"title":"synchronized 的实现原理","translator":null,"url":"/blog/synchronized-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/","weight":0,"wordcount":7213},{"author":"Siran","authorlink":null,"banner":"/img/blog/Java基础/1.jpg","categories":["并发编程"],"date":"2020-03-20T16:37:42+08:00","fuzzywordcount":2900,"keywords":["Java","基础"],"lang":"zh","lastmod":"2020-03-20T16:37:42+08:00","objectID":"8d87c837ebb85ec8ef488428d5619cb9","permalink":"/blog/volatile-%E8%A7%A3%E6%9E%90/","publishdate":"2020-03-20T16:37:42+08:00","readingtime":6,"relpermalink":"/blog/volatile-%E8%A7%A3%E6%9E%90/","summary":"在多线程并发编程中synchronized 和 volatile 扮演着很重要的角色，volatile是轻量级的 synchronized,它能保证共享变量在多处理器下的可见性","tags":["并发关键字"],"title":"volatile 解析","translator":null,"url":"/blog/volatile-%E8%A7%A3%E6%9E%90/","weight":0,"wordcount":2825},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tNbRwly1fyc9vljbxej31400u0u0z.jpg","categories":["计算机"],"date":"2020-03-19T19:12:42+08:00","fuzzywordcount":14900,"keywords":["计算机","HTTP"],"lang":"zh","lastmod":"2020-03-19T19:12:42+08:00","objectID":"ddcad0e80324e4879333b675d959e2d2","permalink":"/blog/http-%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/","publishdate":"2020-03-19T19:12:42+08:00","readingtime":30,"relpermalink":"/blog/http-%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/","summary":"HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范","tags":["协议"],"title":"HTTP 协议总结.md","translator":null,"url":"/blog/http-%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/","weight":0,"wordcount":14863},{"author":"Siran","authorlink":null,"banner":"/img/blog/Java基础/2.jpg","categories":["Java基础"],"date":"2020-03-19T09:37:42+08:00","fuzzywordcount":4700,"keywords":["Java","基础"],"lang":"zh","lastmod":"2020-03-19T09:37:42+08:00","objectID":"c4e9a04eee5b273989eee7b065f98ceb","permalink":"/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-string/","publishdate":"2020-03-19T09:37:42+08:00","readingtime":10,"relpermalink":"/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-string/","summary":"","tags":["String"],"title":"深入理解 String","translator":null,"url":"/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-string/","weight":0,"wordcount":4678},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcgy1ftpqcrh9xoj30rs0kuq8z.jpg","categories":["计算机"],"date":"2020-03-16T19:12:42+08:00","fuzzywordcount":14900,"keywords":["计算机"],"lang":"zh","lastmod":"2020-03-16T19:12:42+08:00","objectID":"6b652aabe367516636c8fb9826e45923","permalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","publishdate":"2020-03-16T19:12:42+08:00","readingtime":30,"relpermalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","summary":"内存(RAM) 是一件非常重要的资源，必须要认真对待内存。虽然目前大多数内存的增长速度要比 IBM 7094 要快的多，但是，程序大小的增长要比内存的增长还快很多。不管存储器有多大，程序大小的增长速度比内存容量的增长速度要快的多。","tags":["计算机"],"title":"计算机之内存管理","translator":null,"url":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","weight":0,"wordcount":14817},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tNbRwly1fy5cgpcejxj30rs0ktawa.jpg","categories":["计算机"],"date":"2020-03-15T19:12:42+08:00","fuzzywordcount":28500,"keywords":["计算机"],"lang":"zh","lastmod":"2020-03-15T19:12:42+08:00","objectID":"49513985ca787192b77ff768e29889ab","permalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/","publishdate":"2020-03-15T19:12:42+08:00","readingtime":57,"relpermalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/","summary":"操作系统中最核心的概念是进程，这是对正在运行程序的一个抽象。即时可以使用的CPU只有一个，但是它们也具有支持(伪)并发操作的能力，它们将一个单独的CPU变换成多个 虚拟的CPU","tags":["计算机"],"title":"计算机之进程与线程","translator":null,"url":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/","weight":0,"wordcount":28436},{"author":"Siran","authorlink":null,"banner":"/img/blog/计算机/CPU.jpeg","categories":["计算机"],"date":"2020-03-14T12:12:42+08:00","fuzzywordcount":5100,"keywords":["计算机"],"lang":"zh","lastmod":"2020-03-14T12:12:42+08:00","objectID":"80c544b7960fde628d2928dbff4afc90","permalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8Bcpu/","publishdate":"2020-03-14T12:12:42+08:00","readingtime":11,"relpermalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8Bcpu/","summary":"CPU 的全称是 Central Processing Unit ，它是你的电脑中最硬件的组件","tags":["计算机"],"title":"计算机之CPU","translator":null,"url":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8Bcpu/","weight":0,"wordcount":5075},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcly1g0crj27wpij31400u0hdu.jpg","categories":["计算机"],"date":"2020-03-13T19:12:42+08:00","fuzzywordcount":2000,"keywords":["计算机"],"lang":"zh","lastmod":"2020-03-13T19:12:42+08:00","objectID":"01fb3616f98ffc3ed95aa694f936bb5a","permalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%9F%BA%E7%A1%80/","publishdate":"2020-03-13T19:12:42+08:00","readingtime":4,"relpermalink":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%9F%BA%E7%A1%80/","summary":"","tags":["计算机"],"title":"计算机之基础","translator":null,"url":"/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%9F%BA%E7%A1%80/","weight":0,"wordcount":1976},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/00704eQkgy1fs2ua9kohvj30rs0kub29.jpg","categories":["计算机"],"date":"2020-03-12T19:12:42+08:00","fuzzywordcount":8300,"keywords":["计算机"],"lang":"zh","lastmod":"2020-03-12T19:12:42+08:00","objectID":"de41eb426fd360f0855cfad987f22364","permalink":"/blog/%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%8C%87%E5%8D%97/","publishdate":"2020-03-12T19:12:42+08:00","readingtime":17,"relpermalink":"/blog/%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%8C%87%E5%8D%97/","summary":"如果你是一个自学成才的工程师，或者从编程培训班毕业，那么你很有必要学习计算机科学。幸运的是，不必为此花上数年光阴和不菲费用去攻读一个学位：仅仅依靠自己，你就可以获得世界一流水平的教育","tags":["计算机"],"title":"自学计算机科学指南","translator":null,"url":"/blog/%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%8C%87%E5%8D%97/","weight":0,"wordcount":8269},{"author":"Siran","authorlink":null,"banner":"/img/blog/算法/企业微信截图_f7d2e2c8-b8d6-4ee5-8179-857f553e3a88.png","categories":["算法"],"date":"2020-03-08T16:37:42+08:00","fuzzywordcount":1100,"keywords":["算法","基础","动态规划"],"lang":"zh","lastmod":"2020-03-08T16:37:42+08:00","objectID":"0cb11557da8326d53b00f1ab817ec15d","permalink":"/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/","publishdate":"2020-03-08T16:37:42+08:00","readingtime":3,"relpermalink":"/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/","summary":"","tags":["算法"],"title":"动态规划经典问题- 股票买卖","translator":null,"url":"/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/","weight":0,"wordcount":1097},{"author":"Siran","authorlink":null,"banner":"/img/blog/Java基础/WechatIMG3.jpeg","categories":["算法"],"date":"2020-03-08T16:37:42+08:00","fuzzywordcount":800,"keywords":["算法","基础"],"lang":"zh","lastmod":"2020-03-08T16:37:42+08:00","objectID":"bad932b7cf208ceb01c19fc0cb0e72a4","permalink":"/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/","publishdate":"2020-03-08T16:37:42+08:00","readingtime":2,"relpermalink":"/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/","summary":"","tags":["算法"],"title":"如何实现LFU算法","translator":null,"url":"/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/","weight":0,"wordcount":732},{"author":"Siran","authorlink":null,"banner":"/img/blog/Java基础/WechatIMG4.jpeg","categories":["算法"],"date":"2020-03-08T15:37:42+08:00","fuzzywordcount":500,"keywords":["算法","基础"],"lang":"zh","lastmod":"2020-03-08T15:37:42+08:00","objectID":"ed48372a3f0df952c5b1b0824e092343","permalink":"/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/","publishdate":"2020-03-08T15:37:42+08:00","readingtime":1,"relpermalink":"/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/","summary":"","tags":["算法"],"title":"如何实现LRU算法","translator":null,"url":"/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/","weight":0,"wordcount":401},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcly1g0n3qqw0xqj31400u0hdt.jpg","categories":["并发编程"],"date":"2020-03-05T12:37:42+08:00","fuzzywordcount":1800,"keywords":["原子类","基础"],"lang":"zh","lastmod":"2020-03-05T12:37:42+08:00","objectID":"ccd59f591a5059c1bece2120387135b9","permalink":"/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/","publishdate":"2020-03-05T12:37:42+08:00","readingtime":4,"relpermalink":"/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/","summary":"AtomicStampedReference是jdk1.5出的一个类，用于解决其他原子类无法解决的ABA问题。","tags":["原子类"],"title":"AtomicStampedReference 详解","translator":null,"url":"/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/","weight":0,"wordcount":1746},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcly1g0d0qfcwpfj31400u0u11.jpg","categories":["并发编程"],"date":"2020-03-05T11:37:42+08:00","fuzzywordcount":3800,"keywords":["原子类","Jdk源码","基础"],"lang":"zh","lastmod":"2020-03-05T11:37:42+08:00","objectID":"5a0179470ff6d60f276df6cc543023e2","permalink":"/blog/longadder-%E8%AF%A6%E8%A7%A3/","publishdate":"2020-03-05T11:37:42+08:00","readingtime":8,"relpermalink":"/blog/longadder-%E8%AF%A6%E8%A7%A3/","summary":"LongAdder 类是jdk1.8新增的原子类，在多线程环境下，它的性能比普通的Atomic类性能高很多，继承 Striped64，通过Striped64的Cell来实现功能，并且在ConcurrentHashMap中也用了Striped64的Cell。","tags":["原子类"],"title":"LongAdder 详解","translator":null,"url":"/blog/longadder-%E8%AF%A6%E8%A7%A3/","weight":0,"wordcount":3752},{"author":"Siran","authorlink":null,"banner":"/img/blog/pulsar/pulsar.svg","categories":["消息队列"],"date":"2020-03-04T22:37:42+08:00","fuzzywordcount":1600,"keywords":["消息中间件","Pulsar"],"lang":"zh","lastmod":"2020-03-04T22:37:42+08:00","objectID":"39b54547ca327bc68e2d1fb83f1b61ec","permalink":"/blog/pulsar-topic-discovery/","publishdate":"2020-03-04T22:37:42+08:00","readingtime":4,"relpermalink":"/blog/pulsar-topic-discovery/","summary":"","tags":["Pulsar"],"title":"Pulsar - Topic Discovery","translator":null,"url":"/blog/pulsar-topic-discovery/","weight":0,"wordcount":1572},{"author":"Siran","authorlink":null,"banner":"/img/blog/pulsar/pulsar.svg","categories":["消息队列"],"date":"2020-03-04T13:38:42+08:00","fuzzywordcount":3200,"keywords":["消息中间件","Pulsar"],"lang":"zh","lastmod":"2020-03-04T13:38:42+08:00","objectID":"6bbed5ff8d026bf5f00c9ae46c8e321a","permalink":"/blog/pulsar-message-lifecycle/","publishdate":"2020-03-04T13:38:42+08:00","readingtime":7,"relpermalink":"/blog/pulsar-message-lifecycle/","summary":"","tags":["Pulsar"],"title":"Pulsar - Message Lifecycle","translator":null,"url":"/blog/pulsar-message-lifecycle/","weight":0,"wordcount":3101},{"author":"Siran","authorlink":null,"banner":"/img/blog/pulsar/pulsar.svg","categories":["消息队列"],"date":"2020-03-04T13:38:42+08:00","fuzzywordcount":3900,"keywords":["消息中间件","Pulsar"],"lang":"zh","lastmod":"2020-03-04T13:38:42+08:00","objectID":"070b26679f8de85ceb3ee0f1cd3b527b","permalink":"/blog/pulsar-vs.-kafka%E4%BA%8C-%E4%BB%A5segment%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%9E%B6%E6%9E%84/","publishdate":"2020-03-04T13:38:42+08:00","readingtime":8,"relpermalink":"/blog/pulsar-vs.-kafka%E4%BA%8C-%E4%BB%A5segment%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%9E%B6%E6%9E%84/","summary":"","tags":["Pulsar"],"title":"Pulsar VS. Kafka（二）: 以Segment为中心的架构","translator":null,"url":"/blog/pulsar-vs.-kafka%E4%BA%8C-%E4%BB%A5segment%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%9E%B6%E6%9E%84/","weight":0,"wordcount":3853},{"author":"Siran","authorlink":null,"banner":"/img/blog/pulsar/pulsar.svg","categories":["消息队列"],"date":"2020-03-04T13:37:42+08:00","fuzzywordcount":5600,"keywords":["消息中间件","Pulsar"],"lang":"zh","lastmod":"2020-03-04T13:37:42+08:00","objectID":"dc72a7d00198d5e228d40f2e5bea2cdf","permalink":"/blog/pulsar-vs.-kafka-%E4%B8%80-%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%9E%8B/","publishdate":"2020-03-04T13:37:42+08:00","readingtime":12,"relpermalink":"/blog/pulsar-vs.-kafka-%E4%B8%80-%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%9E%8B/","summary":"Pulsar的特性包括消息的持久化存储，多租户，多机房互联互备，加密和安全性等。有比较强的健壮性，高可用性和可预测的延迟等。","tags":["Pulsar"],"title":"Pulsar VS. Kafka (一): 消息消费模型","translator":null,"url":"/blog/pulsar-vs.-kafka-%E4%B8%80-%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%9E%8B/","weight":0,"wordcount":5541},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/6ce41a46gy1g31wxsf5ibj20rs0ku10r.jpg","categories":["并发编程"],"date":"2020-03-01T19:12:42+08:00","fuzzywordcount":6000,"keywords":["AQS","Jdk源码","基础"],"lang":"zh","lastmod":"2020-03-01T19:12:42+08:00","objectID":"af77c01358398afcab4dd76772ae0039","permalink":"/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-03-01T19:12:42+08:00","readingtime":12,"relpermalink":"/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"Condition可以替代传统的Object中的wait()、notify()和notifyAll()方法来实现线程间的通信，使线程间协作更加安全和高效。","tags":["AQS"],"title":"Condition 源码分析","translator":null,"url":"/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":5924},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tNbRwly1fug0hms6vej31jk15ou0x.jpg","categories":["并发编程"],"date":"2020-02-15T19:12:42+08:00","fuzzywordcount":3700,"keywords":["线程池","基础"],"lang":"zh","lastmod":"2020-02-15T19:12:42+08:00","objectID":"7e43ae6f733601bf6ca2ba5ed63a42ac","permalink":"/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-02-15T19:12:42+08:00","readingtime":8,"relpermalink":"/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"FutureTask 是一个可以取消的异步计算任务，实现Future，Runnable。提供超时控制、可以获取线程执行后的返回结果、可以取消。","tags":["线程池"],"title":"FutureTask 源码分析","translator":null,"url":"/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":3616},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/00704eQkgy1fs2ua9kohvj30rs0kub29.jpg","categories":["分布式"],"date":"2020-02-13T19:12:42+08:00","fuzzywordcount":8000,"keywords":["分布式"],"lang":"zh","lastmod":"2020-02-13T19:12:42+08:00","objectID":"8db3821c66ce282dee6d43da01a0c194","permalink":"/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AD-raft-%E7%AE%97%E6%B3%95/","publishdate":"2020-02-13T19:12:42+08:00","readingtime":16,"relpermalink":"/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AD-raft-%E7%AE%97%E6%B3%95/","summary":"Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是比 Paxos 更容易理解并且更容易实现。","tags":["分布式"],"title":"分布式理论(六)—— Raft 算法","translator":null,"url":"/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AD-raft-%E7%AE%97%E6%B3%95/","weight":0,"wordcount":7982},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/00704eQkgy1fs3o6ljkknj30rs0ku4qp.jpg","categories":["Java基础"],"date":"2020-02-12T19:12:42+08:00","fuzzywordcount":2900,"keywords":["集合","Jdk源码","基础"],"lang":"zh","lastmod":"2020-02-12T19:12:42+08:00","objectID":"36e23969a903b47b59b720ce424589c8","permalink":"/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-02-12T19:12:42+08:00","readingtime":6,"relpermalink":"/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"PriorityQueue里的每个元素都会进行排序，每次弹出一个元素要么是最大的要么是最小的，取决于排序规则。","tags":["集合"],"title":"PriorityQueue 源码分析","translator":null,"url":"/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":2812},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcgy1ftdx65tgduj30rs0kugov.jpg","categories":["并发编程"],"date":"2020-02-05T19:12:42+08:00","fuzzywordcount":4600,"keywords":["AQS","Jdk源码","基础"],"lang":"zh","lastmod":"2020-02-05T19:12:42+08:00","objectID":"18d4d93336c5e2fc08c03cc3143dd3ed","permalink":"/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-02-05T19:12:42+08:00","readingtime":10,"relpermalink":"/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。","tags":["AQS"],"title":"CountDownLatch 源码分析","translator":null,"url":"/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":4569},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/00704eQkgy1fs0iwgalk7j30rs0kux38.jpg","categories":["分布式"],"date":"2020-02-05T12:12:42+08:00","fuzzywordcount":100,"keywords":["分布式"],"lang":"zh","lastmod":"2020-02-05T12:12:42+08:00","objectID":"bc0eb6cff4dff4eb0faad2d6bf8dfd26","permalink":"/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","publishdate":"2020-02-05T12:12:42+08:00","readingtime":1,"relpermalink":"/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","summary":"","tags":["分布式"],"title":"Raft 思维导图","translator":null,"url":"/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","weight":0,"wordcount":10},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/00704eQkgy1fs77zshhihj30rs0kunab.jpg","categories":["并发编程"],"date":"2020-02-05T11:12:42+08:00","fuzzywordcount":3100,"keywords":["AQS","Jdk源码","基础"],"lang":"zh","lastmod":"2020-02-05T11:12:42+08:00","objectID":"ee211a3ae46d588c78049cdda68d8654","permalink":"/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-02-05T11:12:42+08:00","readingtime":7,"relpermalink":"/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"ReentrantReadWriteLock 是什么?","tags":["AQS"],"title":"ReentrantReadWriteLock 源码分析","translator":null,"url":"/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":3053},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tKfTcgy1ftd20xaj6jj31ji15oqv6.jpg","categories":["并发编程"],"date":"2020-02-04T19:12:42+08:00","fuzzywordcount":2500,"keywords":["AQS","Jdk源码","基础"],"lang":"zh","lastmod":"2020-02-04T19:12:42+08:00","objectID":"423a24bccdb26a0b9e62651f8dd08fd0","permalink":"/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-02-04T19:12:42+08:00","readingtime":5,"relpermalink":"/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"CyclicBarrier(回声栅栏)根据Javadoc描述，它会阻塞一组线程直到这些线程同时达到某个条件才继续执行。它就像一个栅栏一样，当一组线程都到达了栅栏处才继续往下走。","tags":["AQS"],"title":"CyclicBarrier 源码分析","translator":null,"url":"/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":2448},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tNbRwly1fyb51imvdpj31420u0hdt.jpg","categories":["并发编程"],"date":"2020-01-18T19:12:42+08:00","fuzzywordcount":10500,"keywords":["线程池","基础"],"lang":"zh","lastmod":"2020-01-18T19:12:42+08:00","objectID":"86d38dc1237f60422707b5dd45f6644e","permalink":"/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-01-18T19:12:42+08:00","readingtime":21,"relpermalink":"/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"ThreadPoolExecutor中常用参数有哪些，作用是什么？任务提交后，ThreadPoolExecutor会按照什么策略去创建线程用于执行提交任务？","tags":["线程池"],"title":"ThreadPoolExecutor 源码分析","translator":null,"url":"/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":10404},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/00704eQkgy1fs1hvk6nt7j30rs0kunjm.jpg","categories":["并发编程"],"date":"2020-01-05T19:12:42+08:00","fuzzywordcount":6900,"keywords":["AQS","Jdk源码","基础"],"lang":"zh","lastmod":"2020-01-05T19:12:42+08:00","objectID":"ae62462bf92447a1fcedd559363e10b6","permalink":"/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-01-05T19:12:42+08:00","readingtime":14,"relpermalink":"/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"通常使用锁就是 synchronized，经过 jdk 的一系列优化引入偏向锁、轻量级锁、重量级锁等概念，性能也是有很大的提高。","tags":["AQS"],"title":"ReentrantLock 源码分析","translator":null,"url":"/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":6878},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tNc79ly1g1wrp8d29yj31400u0kjm.jpg","categories":["并发编程"],"date":"2020-01-05T12:12:42+08:00","fuzzywordcount":5300,"keywords":["线程池","基础"],"lang":"zh","lastmod":"2020-01-05T12:12:42+08:00","objectID":"4ede7e693da99df08ae7ed398cab1cbd","permalink":"/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2020-01-05T12:12:42+08:00","readingtime":11,"relpermalink":"/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"ScheduledThreadPoolExecutor 定义了一个延迟队列 DelayedWorkQueue，这个队列是基于二叉堆来实现的，每次都会把最快要执行的任务放入堆顶(最小堆)。","tags":["线程池"],"title":"ScheduledThreadPoolExecutor 源码分析","translator":null,"url":"/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":5228},{"author":"Siran","authorlink":null,"banner":"/img/blog/banners/006tNc79ly1g2bd7nfv72j31400u0x6s.jpg","categories":["并发编程"],"date":"2018-06-05T19:12:42+08:00","fuzzywordcount":2400,"keywords":["AQS","Jdk源码","基础"],"lang":"zh","lastmod":"2018-06-05T19:12:42+08:00","objectID":"77d7e0cfee3c1e35259e4ac050677001","permalink":"/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","publishdate":"2018-06-05T19:12:42+08:00","readingtime":5,"relpermalink":"/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","summary":"基于微服务的架构是未来的趋势，但是实现这种架构会面临许多困难。现代应用架构远比过去的架构复杂，因此实现微服务架构将会带来了一系列特殊的挑战，而服务网格可以帮我们解决很多问题。","tags":["AQS"],"title":"Semaphore 源码分析","translator":null,"url":"/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","weight":0,"wordcount":2368}]