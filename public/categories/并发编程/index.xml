<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发编程 on Siran Yao</title>
    <link>/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 并发编程 on Siran Yao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 08 Mar 2020 16:37:42 +0800</lastBuildDate>
    
	<atom:link href="/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AQS 总结</title>
      <link>/blog/aqs-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/aqs-%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CAS 详解</title>
      <link>/blog/cas-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/cas-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Final 详解</title>
      <link>/blog/final-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/final-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Happens-before</title>
      <link>/blog/happens-before/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/happens-before/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JMM 详解</title>
      <link>/blog/jmm-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/jmm-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LockSupport 详解</title>
      <link>/blog/locksupport-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/locksupport-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Thread 详解</title>
      <link>/blog/thread-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/thread-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Volatile 详解</title>
      <link>/blog/volatile-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/volatile-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>什么是伪共享？</title>
      <link>/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%AA%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%AA%E5%85%B1%E4%BA%AB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>手写一个线程池</title>
      <link>/blog/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>揭秘 ThreadLocal</title>
      <link>/blog/%E6%8F%AD%E7%A7%98-threadlocal/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%8F%AD%E7%A7%98-threadlocal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>深入理解 Synchronize</title>
      <link>/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-synchronize/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-synchronize/</guid>
      <description></description>
    </item>
    
    <item>
      <title>线程池总结</title>
      <link>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>重排序</title>
      <link>/blog/%E9%87%8D%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E9%87%8D%E6%8E%92%E5%BA%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AtomicStampedReference 详解</title>
      <link>/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 05 Mar 2020 12:37:42 +0800</pubDate>
      
      <guid>/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/</guid>
      <description>AtomicStampedReference是jdk1.5出的一个类，用于解决其他原子类无法解决的ABA问题。</description>
    </item>
    
    <item>
      <title>LongAdder 详解</title>
      <link>/blog/longadder-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 05 Mar 2020 11:37:42 +0800</pubDate>
      
      <guid>/blog/longadder-%E8%AF%A6%E8%A7%A3/</guid>
      <description>LongAdder 类是jdk1.8新增的原子类，在多线程环境下，它的性能比普通的Atomic类性能高很多，继承 Striped64，通过Striped64的Cell来实现功能，并且在ConcurrentHashMap中也用了Striped64的Cell。</description>
    </item>
    
    <item>
      <title>Condition 源码分析</title>
      <link>/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 01 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>Condition可以替代传统的Object中的wait()、notify()和notifyAll()方法来实现线程间的通信，使线程间协作更加安全和高效。</description>
    </item>
    
    <item>
      <title>FutureTask 源码分析</title>
      <link>/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 15 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>FutureTask 是一个可以取消的异步计算任务，实现Future，Runnable。提供超时控制、可以获取线程执行后的返回结果、可以取消。</description>
    </item>
    
    <item>
      <title>CountDownLatch 源码分析</title>
      <link>/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 05 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</description>
    </item>
    
    <item>
      <title>ReentrantReadWriteLock 源码分析</title>
      <link>/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 05 Feb 2020 11:12:42 +0800</pubDate>
      
      <guid>/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ReentrantReadWriteLock 是什么?</description>
    </item>
    
    <item>
      <title>CyclicBarrier 源码分析</title>
      <link>/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 04 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>CyclicBarrier(回声栅栏)根据Javadoc描述，它会阻塞一组线程直到这些线程同时达到某个条件才继续执行。它就像一个栅栏一样，当一组线程都到达了栅栏处才继续往下走。</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor 源码分析</title>
      <link>/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 18 Jan 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ThreadPoolExecutor中常用参数有哪些，作用是什么？任务提交后，ThreadPoolExecutor会按照什么策略去创建线程用于执行提交任务？</description>
    </item>
    
    <item>
      <title>ReentrantLock 源码分析</title>
      <link>/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>通常使用锁就是 synchronized，经过 jdk 的一系列优化引入偏向锁、轻量级锁、重量级锁等概念，性能也是有很大的提高。</description>
    </item>
    
    <item>
      <title>CompletableFuture 源码分析</title>
      <link>/blog/completablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/completablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>Executors 源码分析</title>
      <link>/blog/executors-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/executors-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>ForkJoinPool 源码分析</title>
      <link>/blog/forkjoinpool-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/forkjoinpool-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>ScheduledThreadPoolExecutor 源码分析</title>
      <link>/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ScheduledThreadPoolExecutor 定义了一个延迟队列 DelayedWorkQueue，这个队列是基于二叉堆来实现的，每次都会把最快要执行的任务放入堆顶(最小堆)。</description>
    </item>
    
    <item>
      <title>线程池参数—— KeepAliveTime</title>
      <link>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0-keepalivetime/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0-keepalivetime/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>Semaphore 源码分析</title>
      <link>/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 05 Jun 2018 19:12:42 +0800</pubDate>
      
      <guid>/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>基于微服务的架构是未来的趋势，但是实现这种架构会面临许多困难。现代应用架构远比过去的架构复杂，因此实现微服务架构将会带来了一系列特殊的挑战，而服务网格可以帮我们解决很多问题。</description>
    </item>
    
  </channel>
</rss>