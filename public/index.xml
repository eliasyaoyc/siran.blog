<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Siran Yao</title>
    <link>/</link>
    <description>Recent content on Siran Yao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 19 Mar 2020 19:12:42 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP 协议总结.md</title>
      <link>/blog/http-%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 19 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/http-%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</guid>
      <description>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</description>
    </item>
    
    <item>
      <title>并发集合 ConcurrentHashMap</title>
      <link>/blog/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88-concurrenthashmap/</link>
      <pubDate>Thu, 19 Mar 2020 10:30:42 +0800</pubDate>
      
      <guid>/blog/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88-concurrenthashmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>深入分析 HashMap</title>
      <link>/blog/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-hashmap/</link>
      <pubDate>Thu, 19 Mar 2020 10:20:42 +0800</pubDate>
      
      <guid>/blog/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-hashmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>深入理解 String</title>
      <link>/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-string/</link>
      <pubDate>Thu, 19 Mar 2020 09:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-string/</guid>
      <description>问题 String 是如何实现的？它有哪些重要的方法？ JDK高版本中的String 有什么变化？ 为什么 String 类型要用 final 修饰？ == 和 equals 的区别是什么？ String 和 String</description>
    </item>
    
    <item>
      <title>计算机之输入输出</title>
      <link>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 17 Mar 2020 16:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>计算机之文件系统</title>
      <link>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 17 Mar 2020 15:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>参考 《现代操作系统 第四版》 又来搞事情了，这次女友让我研究如何实现一个文件系统 昨晚上女友问我，你知道啥是文件吗？于是就有了今天的文章</description>
    </item>
    
    <item>
      <title>计算机之内存管理</title>
      <link>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 16 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>内存(RAM) 是一件非常重要的资源，必须要认真对待内存。虽然目前大多数内存的增长速度要比 IBM 7094 要快的多，但是，程序大小的增长要比内存的增长还快很多。不管存储器有多大，程序大小的增长速度比内存容量的增长速度要快的多。</description>
    </item>
    
    <item>
      <title>计算机之进程与线程</title>
      <link>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 15 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>操作系统中最核心的概念是进程，这是对正在运行程序的一个抽象。即时可以使用的CPU只有一个，但是它们也具有支持(伪)并发操作的能力，它们将一个单独的CPU变换成多个 虚拟的CPU</description>
    </item>
    
    <item>
      <title>计算机之CPU</title>
      <link>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8Bcpu/</link>
      <pubDate>Sat, 14 Mar 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8Bcpu/</guid>
      <description>CPU 的全称是 Central Processing Unit ，它是你的电脑中最硬件的组件</description>
    </item>
    
    <item>
      <title>计算机之基础</title>
      <link>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 13 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>系统的硬件组成 总线 贯穿整个系统的是一组电子管道，称作总线，它携带信息字节并负责在各个部件间传递。总线通常被设计成传送定长的字节块，也就是字(</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway 源码分析 - 核心组件</title>
      <link>/blog/spring-cloud-gateway-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 12 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/spring-cloud-gateway-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway 源码分析 — 初始化</title>
      <link>/blog/spring-cloud-gateway-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Thu, 12 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/spring-cloud-gateway-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway 知识储备(一) Reactor</title>
      <link>/blog/spring-cloud-gateway-%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%B8%80-reactor/</link>
      <pubDate>Thu, 12 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/spring-cloud-gateway-%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%B8%80-reactor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway 知识储备(三) MVC VS. WebFlux</title>
      <link>/blog/spring-cloud-gateway-%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%B8%89-mvc-vs.-webflux/</link>
      <pubDate>Thu, 12 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/spring-cloud-gateway-%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%B8%89-mvc-vs.-webflux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway 知识储备(二) WebFlux</title>
      <link>/blog/spring-cloud-gateway-%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%BA%8C-webflux/</link>
      <pubDate>Thu, 12 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/spring-cloud-gateway-%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%BA%8C-webflux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>自学计算机科学指南</title>
      <link>/blog/%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 12 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%8C%87%E5%8D%97/</guid>
      <description>如果你是一个自学成才的工程师，或者从编程培训班毕业，那么你很有必要学习计算机科学。幸运的是，不必为此花上数年光阴和不菲费用去攻读一个学位：仅仅依靠自己，你就可以获得世界一流水平的教育</description>
    </item>
    
    <item>
      <title>Kafka Producer 拦截器</title>
      <link>/blog/kafka-producer-%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Tue, 10 Mar 2020 15:37:42 +0800</pubDate>
      
      <guid>/blog/kafka-producer-%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring Boot 源码分析 —— SpringApplication</title>
      <link>/blog/spring-boot-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-springapplication/</link>
      <pubDate>Tue, 10 Mar 2020 15:37:42 +0800</pubDate>
      
      <guid>/blog/spring-boot-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-springapplication/</guid>
      <description>概述 import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; // &amp;lt;1&amp;gt; 开启 自动配置 @SpringBootApplication public class TestApplication { public static void main(String[] args) { // &amp;lt;2&amp;gt; 调用 SpringApplication#run() 方法启动Spring Boot 应用 SpringApplication.run(MVCApplication.class, args); } } 这是我们在启动 Spring Boot 时，最常使用的启动类。 Spring Boot 启</description>
    </item>
    
    <item>
      <title>AQS 总结</title>
      <link>/blog/aqs-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/aqs-%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CAS 详解</title>
      <link>/blog/cas-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/cas-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Happens-before</title>
      <link>/blog/happens-before/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/happens-before/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JMM 详解</title>
      <link>/blog/jmm-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/jmm-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LockSupport 详解</title>
      <link>/blog/locksupport-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/locksupport-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Thread 详解</title>
      <link>/blog/thread-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/thread-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Volatile 详解</title>
      <link>/blog/volatile-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/volatile-%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>什么是伪共享？</title>
      <link>/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%AA%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%AA%E5%85%B1%E4%BA%AB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关键字 Final</title>
      <link>/blog/%E5%85%B3%E9%94%AE%E5%AD%97-final/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%85%B3%E9%94%AE%E5%AD%97-final/</guid>
      <description></description>
    </item>
    
    <item>
      <title>动态规划经典问题- 股票买卖</title>
      <link>/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/</guid>
      <description>来自于LeetCode liweiwei1419 股票问题通用解法自我总结 以188号问题为例: 题目： 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 设计一</description>
    </item>
    
    <item>
      <title>如何实现LFU算法</title>
      <link>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>手写一个线程池</title>
      <link>/blog/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>揭秘 ThreadLocal</title>
      <link>/blog/%E6%8F%AD%E7%A7%98-threadlocal/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%8F%AD%E7%A7%98-threadlocal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>深入理解 Synchronize</title>
      <link>/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-synchronize/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-synchronize/</guid>
      <description></description>
    </item>
    
    <item>
      <title>线程池总结</title>
      <link>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>线程间的通信</title>
      <link>/blog/%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>重排序</title>
      <link>/blog/%E9%87%8D%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E9%87%8D%E6%8E%92%E5%BA%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何实现LRU算法</title>
      <link>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 08 Mar 2020 15:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AtomicStampedReference 详解</title>
      <link>/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 05 Mar 2020 12:37:42 +0800</pubDate>
      
      <guid>/blog/atomicstampedreference-%E8%AF%A6%E8%A7%A3/</guid>
      <description>AtomicStampedReference是jdk1.5出的一个类，用于解决其他原子类无法解决的ABA问题。</description>
    </item>
    
    <item>
      <title>LongAdder 详解</title>
      <link>/blog/longadder-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 05 Mar 2020 11:37:42 +0800</pubDate>
      
      <guid>/blog/longadder-%E8%AF%A6%E8%A7%A3/</guid>
      <description>LongAdder 类是jdk1.8新增的原子类，在多线程环境下，它的性能比普通的Atomic类性能高很多，继承 Striped64，通过Striped64的Cell来实现功能，并且在ConcurrentHashMap中也用了Striped64的Cell。</description>
    </item>
    
    <item>
      <title>Pulsar - Topic Discovery</title>
      <link>/blog/pulsar-topic-discovery/</link>
      <pubDate>Wed, 04 Mar 2020 22:37:42 +0800</pubDate>
      
      <guid>/blog/pulsar-topic-discovery/</guid>
      <description>Topic Assignment Pulsar 作为多租户消息系统，具有层级命名空间，这个在之前我们也提到了「Tenant &amp;amp; Namespace」相关概念。除去前两层，第三层就是 top</description>
    </item>
    
    <item>
      <title>Pulsar - Message Lifecycle</title>
      <link>/blog/pulsar-message-lifecycle/</link>
      <pubDate>Wed, 04 Mar 2020 13:38:42 +0800</pubDate>
      
      <guid>/blog/pulsar-message-lifecycle/</guid>
      <description>Data Flow Pulsar 集群 1. Brokers + Bookies 前边我们提到过，broker 是各零件之间进行交换的对象。因 Pulsar 为分层架构模式，使用了 BookKeeper 作为额外的存储系统，bookies 就是</description>
    </item>
    
    <item>
      <title>Pulsar VS. Kafka（二）: 以Segment为中心的架构</title>
      <link>/blog/pulsar-vs.-kafka%E4%BA%8C-%E4%BB%A5segment%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Wed, 04 Mar 2020 13:38:42 +0800</pubDate>
      
      <guid>/blog/pulsar-vs.-kafka%E4%BA%8C-%E4%BB%A5segment%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E6%9E%B6%E6%9E%84/</guid>
      <description>Pulsar的分层架构 Pulsar和其他消息系统最根本的不同是采用分层架构。Pulsar集群由两层组成：无状态服务层，由一组接收和传递消息的</description>
    </item>
    
    <item>
      <title>Pulsar VS. Kafka (一): 消息消费模型</title>
      <link>/blog/pulsar-vs.-kafka-%E4%B8%80-%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 04 Mar 2020 13:37:42 +0800</pubDate>
      
      <guid>/blog/pulsar-vs.-kafka-%E4%B8%80-%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%9E%8B/</guid>
      <description>Pulsar的特性包括消息的持久化存储，多租户，多机房互联互备，加密和安全性等。有比较强的健壮性，高可用性和可预测的延迟等。</description>
    </item>
    
    <item>
      <title>Condition 源码分析</title>
      <link>/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 01 Mar 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/condition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>Condition可以替代传统的Object中的wait()、notify()和notifyAll()方法来实现线程间的通信，使线程间协作更加安全和高效。</description>
    </item>
    
    <item>
      <title>FutureTask 源码分析</title>
      <link>/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 15 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/futuretask-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>FutureTask 是一个可以取消的异步计算任务，实现Future，Runnable。提供超时控制、可以获取线程执行后的返回结果、可以取消。</description>
    </item>
    
    <item>
      <title>分布式理论(六)—— Raft 算法</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AD-raft-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 13 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AD-raft-%E7%AE%97%E6%B3%95/</guid>
      <description>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是比 Paxos 更容易理解并且更容易实现。</description>
    </item>
    
    <item>
      <title>PriorityQueue 源码分析</title>
      <link>/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 12 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/priorityqueue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>PriorityQueue里的每个元素都会进行排序，每次弹出一个元素要么是最大的要么是最小的，取决于排序规则。</description>
    </item>
    
    <item>
      <title>CountDownLatch 源码分析</title>
      <link>/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 05 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/countdownlatch-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</description>
    </item>
    
    <item>
      <title>Raft 思维导图</title>
      <link>/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/raft-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</guid>
      <description>本人对Raft的实现</description>
    </item>
    
    <item>
      <title>分布式理论(一) —— CAP 定理</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B8%80-cap-%E5%AE%9A%E7%90%86/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B8%80-cap-%E5%AE%9A%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式理论(七)—— 一致性协议之 ZAB</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B8%83-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8B-zab/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B8%83-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8B-zab/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式理论(二)——Base 理论</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%BA%8Cbase-%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%BA%8Cbase-%E7%90%86%E8%AE%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式理论(五)—— 一致性算法 Paxos</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%BA%94-%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95-paxos/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%BA%94-%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95-paxos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式理论(八)—— Consistent Hash（一致性哈希算法）</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AB-consistent-hash%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%85%AB-consistent-hash%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式理论（三）—— 一致性协议之 2PC</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B8%89-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8B-2pc/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B8%89-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8B-2pc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分布式理论（四）—— 一致性协议之 3PC</title>
      <link>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%9B%9B-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8B-3pc/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E5%9B%9B-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8B-3pc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ReentrantReadWriteLock 源码分析</title>
      <link>/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 05 Feb 2020 11:12:42 +0800</pubDate>
      
      <guid>/blog/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ReentrantReadWriteLock 是什么?</description>
    </item>
    
    <item>
      <title>CyclicBarrier 源码分析</title>
      <link>/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 04 Feb 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>CyclicBarrier(回声栅栏)根据Javadoc描述，它会阻塞一组线程直到这些线程同时达到某个条件才继续执行。它就像一个栅栏一样，当一组线程都到达了栅栏处才继续往下走。</description>
    </item>
    
    <item>
      <title>ThreadPoolExecutor 源码分析</title>
      <link>/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 18 Jan 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ThreadPoolExecutor中常用参数有哪些，作用是什么？任务提交后，ThreadPoolExecutor会按照什么策略去创建线程用于执行提交任务？</description>
    </item>
    
    <item>
      <title>ReentrantLock 源码分析</title>
      <link>/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 19:12:42 +0800</pubDate>
      
      <guid>/blog/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>通常使用锁就是 synchronized，经过 jdk 的一系列优化引入偏向锁、轻量级锁、重量级锁等概念，性能也是有很大的提高。</description>
    </item>
    
    <item>
      <title>CompletableFuture 源码分析</title>
      <link>/blog/completablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/completablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>Executors 源码分析</title>
      <link>/blog/executors-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/executors-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>ForkJoinPool 源码分析</title>
      <link>/blog/forkjoinpool-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/forkjoinpool-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>ScheduledThreadPoolExecutor 源码分析</title>
      <link>/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ScheduledThreadPoolExecutor 定义了一个延迟队列 DelayedWorkQueue，这个队列是基于二叉堆来实现的，每次都会把最快要执行的任务放入堆顶(最小堆)。</description>
    </item>
    
    <item>
      <title>线程池参数—— KeepAliveTime</title>
      <link>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0-keepalivetime/</link>
      <pubDate>Sun, 05 Jan 2020 12:12:42 +0800</pubDate>
      
      <guid>/blog/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0-keepalivetime/</guid>
      <description>问题 简述 源码分析 总结</description>
    </item>
    
    <item>
      <title>Semaphore 源码分析</title>
      <link>/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 05 Jun 2018 19:12:42 +0800</pubDate>
      
      <guid>/blog/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>基于微服务的架构是未来的趋势，但是实现这种架构会面临许多困难。现代应用架构远比过去的架构复杂，因此实现微服务架构将会带来了一系列特殊的挑战，而服务网格可以帮我们解决很多问题。</description>
    </item>
    
    <item>
      <title>联系我</title>
      <link>/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>联系方式 个人微信 请扫描下面的二维码，并注明姓名-公司信息 个人邮箱 1061347899@qq.com GitHub https://github.com/sirann</description>
    </item>
    
  </channel>
</rss>